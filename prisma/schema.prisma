datasource db {
  provider = "postgresql"
  url      = "postgres://postgres.ldtanrhegexqyjdswvrg:Inceptioncoffe123.@aws-0-eu-central-1.pooler.supabase.com:5432/postgres"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Anuncio {
  id_anuncio    String    @id @default(cuid())
  title         String
  description   String?   
  profesorId    String
  Asignatura    String?
  level         String
  price         Int

  user User @relation(fields: [profesorId], references: [id], onDelete: Cascade)
}



model HorasDisponibles {
  id_horas      String    @id @default(cuid())
  profesorId    String
  DiaHora       DateTime   

  user User @relation(fields: [profesorId], references: [id], onDelete: Cascade)
}

model Reserva {
  id_Reserva    String    @id @default(cuid())
  clientId      String
  DiaHora       DateTime
  anuncioId     String    
      
  user User @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user Anuncio @relation(fields: [anuncioId], references: [id], onDelete: Cascade)
}